import os
import sys
import streamlit as st
from dotenv import load_dotenv
from PyPDF2 import PdfReader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_google_genai import GoogleGenerativeAIEmbeddings
import google.generativeai as genai
from langchain_community.vectorstores import Chroma
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.chains.question_answering import load_qa_chain
from langchain.prompts import PromptTemplate

# ----------------- Load API Key ------------------
load_dotenv()  # Load from local .env file if present

# Try Streamlit secrets first, then environment variable
google_api_key = st.secrets.get("GOOGLE_API_KEY") if "GOOGLE_API_KEY" in st.secrets else os.getenv("GOOGLE_API_KEY")

if not google_api_key:
    st.error("No GOOGLE_API_KEY found. Add it to .streamlit/secrets.toml or set it as an environment variable.")
    st.stop()  # Stop the app if API key is missing

# Configure Gemini API
genai.configure(api_key=google_api_key)

# SQLite fix for Chroma (optional, if needed)
try:
    import pysqlite3
    sys.modules["sqlite3"] = pysqlite3
except ImportError:
    pass 

# ----------------- Utility Functions ------------------
def get_pdf_text(pdf_docs):
    """Extract text from uploaded PDFs"""
    text = ""
    for pdf in pdf_docs:
        pdf_reader = PdfReader(pdf)
        for page in pdf_reader.pages:
            page_text = page.extract_text()
            if page_text:
                text += page_text
    return text

def get_text_chunks(text):
    """Split extracted text into chunks"""
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=10000, chunk_overlap=1000)
    return text_splitter.split_text(text)

def get_vector_store(text_chunks):
    """Create a Chroma vector store from text chunks"""
    embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
    vector_store = Chroma.from_texts(
        text_chunks, embedding=embeddings, persist_directory="chroma_db"
    )
    vector_store.persist()
    return vector_store

def get_conversational_chain():
    """Create a QA chain for answering questions"""
    prompt_template = """
    Answer the question as detailed as possible from the provided context. 
    If the answer is not in the context, say "Answer is not available in the context" ‚Äî don't make anything up.

    Context:
    {context}

    Question:
    {question}

    Answer:
    """
    model = ChatGoogleGenerativeAI(model="gemini-1.5-flash", temperature=0.3)
    prompt = PromptTemplate(template=prompt_template, input_variables=["context", "question"])
    return load_qa_chain(llm=model, prompt=prompt, chain_type="stuff")

def user_input(user_question):
    """Process user question and display response"""
    embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
    new_db = Chroma(persist_directory="chroma_db", embedding_function=embeddings)
    docs = new_db.similarity_search(user_question)
    chain = get_conversational_chain()
    response = chain({"input_documents": docs, "question": user_question})
    st.write("üí¨ Reply:", response["output_text"])

# ----------------- Streamlit App ------------------
def main():
    st.set_page_config(page_title="Chat with PDF using Gemini")
    st.header("üìÑ Chat with PDF using Gemini ‚ú®")

    # Sidebar for PDF upload
    with st.sidebar:
        st.title("üìö Upload PDF Files")
        pdf_docs = st.file_uploader(
            "Upload your PDF file(s)", type=["pdf"], accept_multiple_files=True
        )
        if st.button("Submit & Process"):
            if pdf_docs:
                with st.spinner("Processing PDFs..."):
                    raw_text = get_pdf_text(pdf_docs)
                    text_chunks = get_text_chunks(raw_text)
                    get_vector_store(text_chunks)
                    st.success("‚úÖ PDFs processed and indexed!")
            else:
                st.warning("‚ö†Ô∏è Please upload at least one PDF file.")

    # User question input
    user_question = st.text_input("Ask a question about your uploaded PDFs:")
    if user_question:
        user_input(user_question)

if __name__ == "__main__":
    main()
